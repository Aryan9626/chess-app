```
‚îî‚îÄ‚îÄ üìÅsrc
    ‚îî‚îÄ‚îÄ App.js
        import { useEffect, useState, useCallback } from "react";
        import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
        import Container from "@mui/material/Container";
        import Game from "./Game";
        import InitGame from "./InitGame";
        import CustomDialog from "./components/CustomDialog";
        import socket from "./socket";
        import { TextField } from "@mui/material";
        import { Navigate } from "react-router-dom";
        import Login from "./components/Login";
        import Register from "./components/Register";

        export default function App() {
        const [loggedIn, setLoggedIn] = useState(false);
        const [username, setUsername] = useState("");
        const [usernameSubmitted, setUsernameSubmitted] = useState(false);

        const [room, setRoom] = useState("");
        const [orientation, setOrientation] = useState("");
        const [players, setPlayers] = useState([]);

        // resets the states responsible for initializing a game
        const cleanup = useCallback(() => {
            setRoom("");
            setOrientation("");
            setPlayers("");
        }, []);

        useEffect(() => {
            socket.on("opponentJoined", (roomData) => {
            console.log("roomData", roomData);
            setPlayers(roomData.players);
            });
        }, []);

        useEffect(() => {
            const name = localStorage.getItem("setName");
            if (name) {
            setLoggedIn(name);
            }
        }, []);

        return (
            <Router>
            <Container>
                <Routes>
                <Route
                    path="/"
                    element={
                    !loggedIn ? (
                        <Login setLoggedIn={setLoggedIn} />
                    ) : (
                        <InitGame
                        setRoom={setRoom}
                        setOrientation={setOrientation}
                        setPlayers={setPlayers}
                        />
                    )
                    }
                />
                <Route
                    path="/register"
                    element={ <Register/>
                    }
                />
                <Route
                    path="/game"
                    element={
                    room ? (
                        <Game
                        room={room}
                        orientation={orientation}
                        username={username}
                        players={players}
                        cleanup={cleanup}
                        />
                    ) : (
                        // Redirect to login if not logged in or room not set
                        <Navigate to="/" replace />
                    )
                    }
                />
                {/* Optional catch-all route for handling unmatched paths */}
                <Route path="*" element={<Navigate to="/" replace />} />
                </Routes>
            </Container>
            </Router>
        );
        }
    ‚îî‚îÄ‚îÄ üìÅcomponents
        ‚îî‚îÄ‚îÄ CustomDialog.js
            import Button from "@mui/material/Button";
            import Dialog from "@mui/material/Dialog";
            import DialogActions from "@mui/material/DialogActions";
            import DialogContent from "@mui/material/DialogContent";
            import DialogContentText from "@mui/material/DialogContentText";
            import DialogTitle from "@mui/material/DialogTitle";

            export default function CustomDialog({ open, children, title, contentText, handleContinue }) {
            return (
                <Dialog open={open}> {/*dialog container*/}
                <DialogTitle>{title}</DialogTitle>
                <DialogContent> {/* Main body of modal/dialog */}
                    <DialogContentText> {/* main text */}
                    {contentText}
                    </DialogContentText>
                    {children} {/* Other content */}
                </DialogContent>
                <DialogActions> {/* Dialog action buttons */}
                    {/* Force users to make input without option to cancel */}
                    {/* <Button onClick={handleClose}>Cancel</Button> */}
                    <Button onClick={handleContinue}>Continue</Button>
                </DialogActions>
                </Dialog>
            );
            }
        ‚îî‚îÄ‚îÄ VideoPlayer.js
            import React, { useRef, useEffect } from 'react';
            import Peer from 'simple-peer';

            const VideoPlayer = ({ peer }) => {
                const ref = useRef();

                useEffect(() => {
                    peer.on('stream', stream => {
                        ref.current.srcObject = stream;
                    });
                }, [peer]);

                return (
                    <video playsInline autoPlay ref={ref} />
                );
            };

            export default VideoPlayer;
    ‚îî‚îÄ‚îÄ Game.js
        import React, { useState, useMemo, useCallback, useEffect, useRef } from "react";
        import { Chessboard } from "react-chessboard";
        import { Chess } from "chess.js";
        import Peer from 'simple-peer';
        import CustomDialog from "./components/CustomDialog";
        import VideoPlayer from "./components/VideoPlayer";
        import socket from "./socket";
        import { Card, CardContent, Typography, Stack, Box, Grid, List, ListItem, ListItemText, ListSubheader } from "@mui/material";

        function Game({ players, room, orientation, cleanup }) {
            const chess = useMemo(() => new Chess(), []); // <- 1
            const [fen, setFen] = useState(chess.fen()); // <- 2
            const [over, setOver] = useState("");
            const [peers, setPeers] = useState([]);
            const userVideo = useRef();
            const peersRef = useRef([]);

            const makeAMove = useCallback((move) => {
                try {
                    const result = chess.move(move); // update Chess instance
                    setFen(chess.fen()); // update fen state to trigger a re-render

                    console.log("over, checkmate", chess.isGameOver(), chess.isCheckmate());

                    if (chess.isGameOver()) { // check if move led to "game over"
                        if (chess.isCheckmate()) { // if reason for game over is a checkmate
                            // Set message to checkmate. 
                            setOver(
                                `Checkmate! ${chess.turn() === "w" ? "black" : "white"} wins!`
                            );
                            // The winner is determined by checking which side made the last move
                        } else if (chess.isDraw()) { // if it is a draw
                            setOver("Draw"); // set message to "Draw"
                        } else {
                            setOver("Game over");
                        }
                    }

                    return result;
                } catch (e) {
                    return null;
                } // null if the move was illegal, the move object if the move was legal
            }, [chess]);

            useEffect(() => {
                navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
                    userVideo.current.srcObject = stream;

                    socket.on('userJoined', payload => {
                        const peer = addPeer(payload.signal, payload.callerID, stream);
                        peersRef.current.push({
                            peerID: payload.callerID,
                            peer,
                        });

                        setPeers(users => [...users, peer]);
                    });

                    socket.on('receivingReturnedSignal', payload => {
                        const item = peersRef.current.find(p => p.peerID === payload.id);
                        item.peer.signal(payload.signal);
                    });
                });

                return () => {
                    peersRef.current.forEach(p => {
                        p.peer.destroy();
                    });
                };
            }, []);

            function createPeer(userToSignal, callerID, stream) {
                const peer = new Peer({
                    initiator: true,
                    trickle: false,
                    stream,
                });

                peer.on('signal', signal => {
                    socket.emit('sendingSignal', { userToSignal, callerID, signal });
                });

                return peer;
            }

            function addPeer(incomingSignal, callerID, stream) {
                const peer = new Peer({
                    initiator: false,
                    trickle: false,
                    stream,
                });

                peer.on('signal', signal => {
                    socket.emit('returningSignal', { signal, callerID });
                });

                peer.signal(incomingSignal);

                return peer;
            }

            // onDrop function
            function onDrop(sourceSquare, targetSquare) {
                // orientation is either 'white' or 'black'. game.turn() returns 'w' or 'b'
                if (chess.turn() !== orientation[0]) return false; // <- 1 prohibit player from moving piece of other player

                if (players.length < 2) return false; // <- 2 disallow a move if the opponent has not joined

                const moveData = {
                    from: sourceSquare,
                    to: targetSquare,
                    color: chess.turn(),
                    promotion: "q", // promote to queen where possible
                };

                const move = makeAMove(moveData);

                // illegal move
                if (move === null) return false;

                socket.emit("move", { // <- 3 emit a move event.
                    move,
                    room,
                }); // this event will be transmitted to the opponent via the server

                return true;
            }

            useEffect(() => {
                socket.on("move", (move) => {
                    makeAMove(move); //
                });
            }, [makeAMove]);

            useEffect(() => {
                socket.on('playerDisconnected', (player) => {
                    setOver(`${player.username} has disconnected`); // set game over
                });
            }, []);

            useEffect(() => {
                socket.on('closeRoom', ({ roomId }) => {
                    if (roomId === room) {
                        cleanup();
                    }
                });
            }, [room, cleanup]);

            return (
                <Stack spacing={2}>
                    <Card>
                        <CardContent>
                            <Typography variant="h5">Room ID: {room}</Typography>
                        </CardContent>
                    </Card>
                    <Box>
                        <List>
                            <ListSubheader>Players</ListSubheader>
                            {players.map((player, index) => (
                                <ListItem key={index}>
                                    <ListItemText
                                        primary={player.username}
                                        secondary={player.id === socket.id ? `You: ${orientation}` : `Opponent: ${orientation === "white" ? "black" : "white"}`}
                                    />
                                </ListItem>
                            ))}
                        </List>
                    </Box>
                    <Grid container spacing={2}>
                        <Grid item xs={12} md={6}>
                            <div className="board" style={{ maxWidth: 600, maxHeight: 600 }}>
                                <Chessboard
                                    position={fen}
                                    onPieceDrop={onDrop}
                                    boardOrientation={orientation}
                                />
                            </div>
                        </Grid>
                        <Grid item xs={12} md={6}>
                            <video ref={userVideo} autoPlay playsInline style={{ width: "100%", maxHeight: 600 }} />
                            {peers.map((peer, index) => (
                                <VideoPlayer key={index} peer={peer} />
                            ))}
                        </Grid>
                    </Grid>
                    <CustomDialog
                        open={Boolean(over)}
                        title={over}
                        contentText={over}
                        handleContinue={() => {
                            socket.emit("closeRoom", { roomId: room });
                            cleanup();
                        }}
                    />
                </Stack>
            );
            
        }

        export default Game;
    ‚îî‚îÄ‚îÄ index.js
        import React from "react";
        import ReactDOM from "react-dom/client";
        import App from "./App";

        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(<App />);
    ‚îî‚îÄ‚îÄ InitGame.js
        import { Button, Stack, TextField } from "@mui/material";
        import { useEffect, useState } from "react";
        import CustomDialog from "./components/CustomDialog";
        import socket from './socket';
        import { useNavigate } from "react-router-dom";

        export default function InitGame({ setRoom, setOrientation, setPlayers }) {
            const navigate = useNavigate();
            const [roomDialogOpen, setRoomDialogOpen] = useState(false);
            const [roomInput, setRoomInput] = useState(''); // input state
            const [roomError, setRoomError] = useState('');

            // Function to handle the logout action
            const logout = () => {
                localStorage.clear();
                window.location.reload();
                navigate("/");
            };

            // Function to handle the continuation from the dialog
            const handleJoinRoom = () => {
                if (!roomInput.trim()) {
                    setRoomError("Room ID cannot be empty.");
                    return;
                }
                socket.emit("joinRoom", { roomId: roomInput.trim() }, (response) => {
                    if (response.error) {
                        setRoomError(response.message);
                        return;
                    }
                    setRoom(response.roomId);
                    setPlayers(response.players);
                    setOrientation("black"); // This could be dynamic based on the response if needed
                    setRoomDialogOpen(false);
                    navigate("/game");
                });
            };

            return (
                <Stack
                    justifyContent="center"
                    alignItems="center"
                    sx={{ py: 1, height: "100vh" }}
                >
                    <CustomDialog
                        open={roomDialogOpen}
                        handleClose={() => setRoomDialogOpen(false)}
                        title="Select Room to Join"
                        contentText="Enter a valid room ID to join the room"
                        handleContinue={handleJoinRoom}
                    >
                        <TextField
                            autoFocus
                            margin="dense"
                            id="room"
                            label="Room ID"
                            name="room"
                            value={roomInput}
                            onChange={(e) => setRoomInput(e.target.value)}
                            type="text"
                            fullWidth
                            variant="standard"
                            error={Boolean(roomError)}
                            helperText={roomError || 'Enter a room ID'}
                        />
                    </CustomDialog>

                    {/* Button to log out */}
                    <Button onClick={logout}>Log Out</Button>

                    {/* Button to start a new game */}
                    <Button
                        variant="contained"
                        onClick={() => {
                            socket.emit("createRoom", (response) => {
                                console.log(response);
                                setRoom(response);
                                setOrientation("white");
                                navigate("/game");
                            });
                        }}
                    >
                        Start a game
                    </Button>

                    {/* Button to open the join game dialog */}
                    <Button onClick={() => setRoomDialogOpen(true)}>
                        Join a game
                    </Button>
                </Stack>
            );
        }
    ‚îî‚îÄ‚îÄ socket.js
        import { io } from "socket.io-client"; // import connection function
        const socket = io('localhost:8081'); // initialize websocket connection
        export default socket;
```

.env
DB_HOST=mysql-container
DB_PORT=3306
DB_USER=user
DB_PASSWORD=user
DB_NAME=chess_app
# JWT_SECRET=your_jwt_secret

server
    require('dotenv').config();

    const mysql = require('mysql2');
    const bcrypt = require('bcrypt');
    const session = require('express-session');
    const bodyParser = require('body-parser');
    const express = require('express');
    const { Server } = require("socket.io");
    const http = require('http');
    const cors = require('cors');
    const { v4: uuidV4 } = require('uuid');

    const db = mysql.createConnection({
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_NAME
    });

    // Connect to the database
    db.connect(err => {
        if (err) {
            console.error('Error connecting to the database: ' + err.stack);
            return;
        }
        console.log('Connected to database.');
    });

    class RoomManager {
        constructor() {
            this.rooms = new Map();
        }

        createRoom(socket) {
            const roomId = uuidV4();
            this.rooms.set(roomId, {
                roomId,
                players: [{ id: socket.id, username: socket.data?.username }]
            });
            return roomId;
        }

        joinRoom(socket, roomId) {
            const room = this.rooms.get(roomId);
            if (!room) return { error: true, message: 'room does not exist' };
            if (room.players.length <= 0) return { error: true, message: 'room is empty' };
            if (room.players.length >= 2) return { error: true, message: 'room is full' };

            room.players.push({ id: socket.id, username: socket.data?.username });
            this.rooms.set(roomId, room);
            return { error: false, room };
        }

        handleDisconnect(socket) {
            for (let room of this.rooms.values()) {
                const userInRoom = room.players.find(player => player.id === socket.id);
                if (userInRoom) {
                    if (room.players.length < 2) {
                        this.rooms.delete(room.roomId);
                    } else {
                        socket.to(room.roomId).emit("playerDisconnected", userInRoom);
                    }
                    return;
                }
            }
        }

        async closeRoom(io, roomId) {
            const clientSockets = await io.in(roomId).fetchSockets();
            for (let s of clientSockets) {
                s.leave(roomId);
            }
            this.rooms.delete(roomId);
        }

        getRoom(roomId) {
            return this.rooms.get(roomId);
        }
    }

    class ServerApp {
        constructor(port) {
            this.app = express();
            this.app.use(cors());
            this.app.use(express.json());

            this.server = http.createServer(this.app);
            this.port = port || 8081;
            this.io = new Server(this.server, { cors: '*' });
            this.roomManager = new RoomManager();
        }

        setupSocketEvents() {
            this.io.on('connection', (socket) => {
                console.log(`${socket.id} connected`);

                socket.on('username', (username) => {
                    console.log('username:', username);
                    socket.data.username = username;
                });

                socket.on('createRoom', async (callback) => {
                    const roomId = this.roomManager.createRoom(socket);
                    await socket.join(roomId);
                    callback(roomId);
                });

                socket.on('joinRoom', async (args, callback) => {
                    const { error, message, room } = this.roomManager.joinRoom(socket, args.roomId);
                    if (error) {
                        if (callback) callback({ error, message });
                        return;
                    }

                    await socket.join(args.roomId);
                    callback(room);
                    socket.to(args.roomId).emit('opponentJoined', room);
                });

                socket.on('move', (data) => {
                    socket.to(data.room).emit('move', data.move);
                });

                socket.on("disconnect", () => {
                    this.roomManager.handleDisconnect(socket);
                });

                socket.on("closeRoom", async (data) => {
                    await this.roomManager.closeRoom(this.io, data.roomId);
                    socket.to(data.roomId).emit("closeRoom", data);
                });
            });
        }

        setupRoutes() {
            // User login
            this.app.post('/login', async (req, res) => {
                const { username, password } = req.body;
                const query = 'SELECT * FROM users WHERE username = ?';
                db.query(query, [username], async (err, result) => {
                    if (err) res.status(500).send('Database error');
                    else if (result.length > 0) {
                        const match = await bcrypt.compare(password, result[0].password);
                        if (match) {
                            res.status(200).send({ message: 'Login successful', user: result[0] });
                        } else {
                            res.status(401).send('Invalid credentials');
                        }
                    } else {
                        res.status(404).send('User not found');
                    }
                });
            });

            // User registration
            this.app.post('/register', async (req, res) => {
                const { username, password } = req.body;
                const salt = await bcrypt.genSalt(10);
                const hashedPassword = await bcrypt.hash(password, salt);

                const query = 'INSERT INTO users (username, password) VALUES (?, ?)';
                db.query(query, [username, hashedPassword], (err, result) => {
                    if (err) res.status(500).send('Database error');
                    else res.status(201).send({ message: 'User registered successfully', userId: result.insertId });
                });
            });
        }

        start() {
            this.setupRoutes();
            this.setupSocketEvents();
            this.server.listen(this.port, () => {
                console.log(`listening on *:${this.port}`);
            });
        }
    }

    const port = process.env.PORT || 8081;
    const serverApp = new ServerApp(port);
    serverApp.start();